{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { useState, useEffect } from 'react';\nimport useIsMounted from 'react-is-mounted-hook';\nimport { loadScript, getScriptTag } from './utils';\nvar pendingScripts = {};\nexport function useScript() {\n  var scripts = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    scripts[_i] = arguments[_i];\n  }\n  var isMounted = useIsMounted();\n  var _a = useState(function () {\n      for (var _i = 0, scripts_1 = scripts; _i < scripts_1.length; _i++) {\n        var script = scripts_1[_i];\n        // Found a pending script, set initial state to true\n        if (pendingScripts[script.src]) {\n          return true;\n        }\n        // Script doesn't exist in dom, set initial state to true\n        if (!getScriptTag(script.src)) {\n          return true;\n        }\n      }\n      return false;\n    }),\n    loading = _a[0],\n    setLoading = _a[1];\n  var _b = useState(null),\n    error = _b[0],\n    setError = _b[1];\n  useEffect(function () {\n    function loadScripts() {\n      return __awaiter(this, void 0, void 0, function () {\n        var _i, scripts_2, script, result;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _i = 0, scripts_2 = scripts;\n              _a.label = 1;\n            case 1:\n              if (!(_i < scripts_2.length)) return [3 /*break*/, 4];\n              script = scripts_2[_i];\n              return [4 /*yield*/, loadNewScript(script)];\n            case 2:\n              result = _a.sent();\n              if (!isMounted()) {\n                return [2 /*return*/];\n              }\n\n              if (!result.success) {\n                setError(result.error);\n                return [2 /*return*/];\n              }\n\n              _a.label = 3;\n            case 3:\n              _i++;\n              return [3 /*break*/, 1];\n            case 4:\n              setLoading(false);\n              return [2 /*return*/];\n          }\n        });\n      });\n    }\n    // No await here intentionally because hooks cannot be async functions\n    loadScripts();\n  }, [scripts, isMounted]);\n  return {\n    loading: loading,\n    error: error\n  };\n}\nfunction loadNewScript(scriptProps) {\n  var runningPromise = pendingScripts[scriptProps.src];\n  if (runningPromise) {\n    return runningPromise;\n  }\n  var script = getScriptTag(scriptProps.src);\n  if (script) {\n    var result = {\n      element: script,\n      script: script.src,\n      success: true,\n      error: null\n    };\n    return Promise.resolve(result);\n  }\n  pendingScripts[scriptProps.src] = loadScript(scriptProps).then(function (result) {\n    delete pendingScripts[scriptProps.src];\n    return result;\n  });\n  return pendingScripts[scriptProps.src];\n}","map":{"version":3,"names":["useState","useEffect","useIsMounted","loadScript","getScriptTag","pendingScripts","useScript","scripts","_i","arguments","length","isMounted","_a","scripts_1","script","src","loading","setLoading","_b","error","setError","loadScripts","scripts_2","loadNewScript","result","sent","success","scriptProps","runningPromise","element","Promise","resolve","then"],"sources":["/Users/bhavyatanwar/Desktop/ev-charging/node_modules/use-script/src/use-script.ts"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport useIsMounted from 'react-is-mounted-hook'\nimport { loadScript, ErrorState, ScriptLoadResult, getScriptTag } from './utils'\n\nexport interface ScriptProps {\n    src: HTMLScriptElement['src']\n    [key: string]: any\n}\n\nconst pendingScripts: { [script: string]: Promise<ScriptLoadResult> } = {}\n\nexport function useScript(\n    ...scripts: ScriptProps[]\n): { loading: boolean; error: ErrorState } {\n    const isMounted = useIsMounted()\n    const [loading, setLoading] = useState(() => {\n        for (const script of scripts) {\n            // Found a pending script, set initial state to true\n            if (pendingScripts[script.src]) {\n                return true\n            }\n\n            // Script doesn't exist in dom, set initial state to true\n            if (!getScriptTag(script.src)) {\n                return true\n            }\n        }\n\n        return false\n    })\n\n    const [error, setError] = useState<ErrorState>(null)\n\n    useEffect(() => {\n        async function loadScripts() {\n            for (const script of scripts) {\n                const result = await loadNewScript(script)\n                if (!isMounted()) {\n                    return\n                }\n                if (!result.success) {\n                    setError(result.error)\n                    return\n                }\n            }\n\n            setLoading(false)\n        }\n\n        // No await here intentionally because hooks cannot be async functions\n        loadScripts()\n    }, [scripts, isMounted])\n\n    return { loading, error }\n}\n\nfunction loadNewScript(scriptProps: ScriptProps): Promise<ScriptLoadResult> {\n    const runningPromise = pendingScripts[scriptProps.src]\n\n    if (runningPromise) {\n        return runningPromise\n    }\n\n    const script = getScriptTag(scriptProps.src)\n\n    if (script) {\n        const result: ScriptLoadResult = {\n            element: script,\n            script: script.src,\n            success: true,\n            error: null,\n        }\n\n        return Promise.resolve(result)\n    }\n\n    pendingScripts[scriptProps.src] = loadScript(scriptProps).then(result => {\n        delete pendingScripts[scriptProps.src]\n\n        return result\n    })\n\n    return pendingScripts[scriptProps.src]\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,uBAAuB;AAChD,SAASC,UAAU,EAAgCC,YAAY,QAAQ,SAAS;AAOhF,IAAMC,cAAc,GAAoD,EAAE;AAE1E,OAAM,SAAUC,SAASA,CAAA;EACrB,IAAAC,OAAA;OAAA,IAAAC,EAAA,IAAyB,EAAzBA,EAAA,GAAAC,SAAA,CAAAC,MAAyB,EAAzBF,EAAA,EAAyB;IAAzBD,OAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EAEA,IAAMG,SAAS,GAAGT,YAAY,EAAE;EAC1B,IAAAU,EAAA,GAAwBZ,QAAQ,CAAC;MACnC,KAAqB,IAAAQ,EAAA,IAAO,EAAPK,SAAA,GAAAN,OAAO,EAAPC,EAAA,GAAAK,SAAA,CAAAH,MAAO,EAAPF,EAAA,EAAO,EAAE;QAAzB,IAAMM,MAAM,GAAAD,SAAA,CAAAL,EAAA;QACb;QACA,IAAIH,cAAc,CAACS,MAAM,CAACC,GAAG,CAAC,EAAE;UAC5B,OAAO,IAAI;;QAGf;QACA,IAAI,CAACX,YAAY,CAACU,MAAM,CAACC,GAAG,CAAC,EAAE;UAC3B,OAAO,IAAI;;;MAInB,OAAO,KAAK;IAChB,CAAC,CAAC;IAdKC,OAAO,GAAAJ,EAAA;IAAEK,UAAU,GAAAL,EAAA,GAcxB;EAEI,IAAAM,EAAA,GAAoBlB,QAAQ,CAAa,IAAI,CAAC;IAA7CmB,KAAK,GAAAD,EAAA;IAAEE,QAAQ,GAAAF,EAAA,GAA8B;EAEpDjB,SAAS,CAAC;IACN,SAAeoB,WAAWA,CAAA;;;;;;oBACM,EAAPC,SAAA,GAAAf,OAAO;;;oBAAPC,EAAA,GAAAc,SAAA,CAAAZ,MAAO;cAAjBI,MAAM,GAAAQ,SAAA,CAAAd,EAAA;cACE,qBAAMe,aAAa,CAACT,MAAM,CAAC;;cAApCU,MAAM,GAAGZ,EAAA,CAAAa,IAAA,EAA2B;cAC1C,IAAI,CAACd,SAAS,EAAE,EAAE;gBACd;;;cAEJ,IAAI,CAACa,MAAM,CAACE,OAAO,EAAE;gBACjBN,QAAQ,CAACI,MAAM,CAACL,KAAK,CAAC;gBACtB;;;;;cAPaX,EAAA,EAAO;;;cAW5BS,UAAU,CAAC,KAAK,CAAC;;;;;;IAGrB;IACAI,WAAW,EAAE;EACjB,CAAC,EAAE,CAACd,OAAO,EAAEI,SAAS,CAAC,CAAC;EAExB,OAAO;IAAEK,OAAO,EAAAA,OAAA;IAAEG,KAAK,EAAAA;EAAA,CAAE;AAC7B;AAEA,SAASI,aAAaA,CAACI,WAAwB;EAC3C,IAAMC,cAAc,GAAGvB,cAAc,CAACsB,WAAW,CAACZ,GAAG,CAAC;EAEtD,IAAIa,cAAc,EAAE;IAChB,OAAOA,cAAc;;EAGzB,IAAMd,MAAM,GAAGV,YAAY,CAACuB,WAAW,CAACZ,GAAG,CAAC;EAE5C,IAAID,MAAM,EAAE;IACR,IAAMU,MAAM,GAAqB;MAC7BK,OAAO,EAAEf,MAAM;MACfA,MAAM,EAAEA,MAAM,CAACC,GAAG;MAClBW,OAAO,EAAE,IAAI;MACbP,KAAK,EAAE;KACV;IAED,OAAOW,OAAO,CAACC,OAAO,CAACP,MAAM,CAAC;;EAGlCnB,cAAc,CAACsB,WAAW,CAACZ,GAAG,CAAC,GAAGZ,UAAU,CAACwB,WAAW,CAAC,CAACK,IAAI,CAAC,UAAAR,MAAM;IACjE,OAAOnB,cAAc,CAACsB,WAAW,CAACZ,GAAG,CAAC;IAEtC,OAAOS,MAAM;EACjB,CAAC,CAAC;EAEF,OAAOnB,cAAc,CAACsB,WAAW,CAACZ,GAAG,CAAC;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}